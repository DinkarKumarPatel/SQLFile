create PROCEDURE SAVETRAN_LOC_STOCK_LEVEL
(
	@NUPDATEMODE NUMERIC(1,0),  --@NUPDATEMODE 1 FOR ADD,2 FOR EDIT 
	@NSPID	VARCHAR(40),                
	@CMEMONOPREFIX VARCHAR(5)=  '',
	@CFINYEAR	VARCHAR(5)='',
	@CLOC_ID VARCHAR(2)='', 
	@CMEMO_ID VARCHAR(22)=''   --@CTEMPLATE_ID CODE REQUIRED FOR EDIT MODE
)
--WITH ENCRYPTION
AS
BEGIN
  DECLARE @CMASTERTABLENAME VARCHAR(100),
          @CTEMPMASTERTABLE VARCHAR(100),
          @CTEMPMASTERTABLENAME VARCHAR(100),
          @CDETAILTABLENAME VARCHAR(100),
          @CTEMPDETAILTABLE VARCHAR(100),
          @CTEMPDETAILTABLENAME VARCHAR(100),
		  @CTEMPDBNAME VARCHAR(100),		
		  @NSTEP VARCHAR(10),
		  @BENABLETEMPDB BIT,
		  @CERRORMSG VARCHAR(500),
		  @NSAVETRANLOOP	BIT,
		  @CCMD NVARCHAR(MAX),
		  @NMEMONOLEN VARCHAR(10),
		  @CKEYFIELD VARCHAR(100),
		  @CMEMONOVAL VARCHAR(100),
		  @CMEMONO VARCHAR(100),
		  @CKEYFIELDVAL1 VARCHAR(40),
		  @CDETAILTABLENAME1 VARCHAR(100),
          @CTEMPDETAILTABLE1 VARCHAR(100),
          @CTEMPDETAILTABLENAME1 VARCHAR(100),
          @CDETAILTABLENAME2 VARCHAR(100),
          @CTEMPDETAILTABLE2 VARCHAR(100),
          @CTEMPDETAILTABLENAME2 VARCHAR(100),@cWhereClause VARCHAR(200)
          SET @NSTEP = 0		-- SETTTING UP ENVIRONMENT		
			-- TEMPORARY DATABASE Discarded now onwards as per Meeting on 30-10-2020 mentioned in Client issues List		
			SET @CTEMPDBNAME = ''	

BEGIN TRY
			
		SET @CMASTERTABLENAME ='LOC_STOCK_LEVEL_MST'		
		SET @CTEMPMASTERTABLE  ='stklvl_LOC_STOCK_LEVEL_MST_UPLOAD'
		SET @CDETAILTABLENAME ='LOC_STOCK_LEVEL'	
		SET @CTEMPDETAILTABLE  ='stklvl_LOC_STOCK_LEVEL_upload'
		    
		    
		SET @CERRORMSG			= ''
		SET @CKEYFIELD			= 'MEMO_ID'
		SET @CMEMONO			= 'MEMO_NO'
		SET @NMEMONOLEN			= 10
			
	    BEGIN TRANSACTION
	     
		IF @NUPDATEMODE = 1
		BEGIN
			SET @NSTEP = 30		-- GENERATING NEW ID
			IF ISNULL(@CLOC_ID,'')=''
				SELECT TOP 1 @CLOC_ID=DEPT_ID FROM NEW_APP_LOGIN_INFO (nolock) WHERE SPID=@@SPID 
			
			IF ISNULL(@CLOC_ID,'')=''
			 BEGIN
				SET @CERRORMSG =' LOCATION ID CAN NOT BE BLANK  '  
				GOTO END_PROC    
			 END
			
			SET @NSTEP = 40
			-- GENERATING NEW ORDER ID
			SET @CKEYFIELDVAL1 = @CLOC_ID + CONVERT(VARCHAR(38),NEWID())
			IF @CKEYFIELDVAL1 IS NULL OR @CKEYFIELDVAL1 LIKE '%LATER%'  
			BEGIN
					SET @CERRORMSG = 'STEP- ' + LTRIM(STR(@NSTEP)) + ' ERROR CREATING NEXT MEMO ID....'
					GOTO END_PROC
			END
					
			SET @NSTEP = 60	-- UPDATING NEW ID INTO TEMP TABLES
			UPDATE stklvl_LOC_STOCK_LEVEL_MST_UPLOAD SET memo_id=@CKEYFIELDVAL1,LAST_UPDATE=GETDATE()
			WHERE sp_id=@nSpId

			
		END--END FROM ADD MODE

					
		SET @NSTEP = 70	-- UPDATING NEW ID INTO TEMP TABLES
		UPDATE stklvl_LOC_STOCK_LEVEL_UPLOAD SET memo_id=@CKEYFIELDVAL1,ROW_ID=NEWID()
		WHERE sp_id=@nSpId AND (left(row_id,5)='LATER' OR ISNULL(row_id,'')='')
	    
	    IF @NUPDATEMODE<>1
		BEGIN--CALL FROM EDIT AND CANCELLED MODE
			SET @NSTEP = 80		-- GETTING MEMO ID FROM TEMP TABLE
				   
			IF @NUPDATEMODE=3
			BEGIN
				SET @CKEYFIELDVAL1=@CMEMO_ID

				DELETE FROM LOC_STOCK_LEVEL WHERE MEMO_ID =@CMEMO_ID 
				DELETE FROM LOC_STOCK_LEVEL_MST WHERE MEMO_ID =@CMEMO_ID 
				GOTO END_PROC
			END
				   
			SELECT TOP 1 @CKEYFIELDVAL1=memo_id FROM stklvl_LOC_STOCK_LEVEL_MST_UPLOAD (NOLOCK)	 
			WHERE sp_id=@nSpId

			IF @NUPDATEMODE = 2
			BEGIN
				UPDATE stklvl_LOC_STOCK_LEVEL_MST_UPLOAD SET LAST_UPDATE=GETDATE()
				WHERE sp_id=@nSpId

				UPDATE stklvl_LOC_STOCK_LEVEL_UPLOAD SET MEMO_ID =@CKEYFIELDVAL1
				       --ROW_ID =newid()
				WHERE sp_id=@nSpId

			END	    


		END
		
		SET @NSTEP = 160 
		SET @cWhereClause=' sp_id='''+ltrim(@nSpId)+''''

		EXEC UPDATEMASTERXN_OPT 
  			  @CSOURCEDB	= ''
			, @CSOURCETABLE = @CTEMPMASTERTABLE
			, @CDESTDB		= ''
			, @CDESTTABLE	= @CMASTERTABLENAME
			, @CKEYFIELD1	= 'memo_id'
			, @BALWAYSUPDATE = 1
			, @cFilterCondition=@cWhereClause
		
		SET @NSTEP = 170 
		DELETE  A FROM LOC_STOCK_LEVEL  A WITH (ROWLOCK) WHERE MEMO_ID=@CKEYFIELDVAL1

		SET @NSTEP = 180 
		EXEC UPDATEMASTERXN_OPT 
			@CSOURCEDB	= ''
		, @CSOURCETABLE = @CTEMPDETAILTABLE
		, @CDESTDB		= ''
		, @CDESTTABLE	= @CDETAILTABLENAME
		, @CKEYFIELD1	= 'memo_id'
		, @BALWAYSUPDATE = 1
		, @cFilterCondition=@cWhereClause

END TRY
BEGIN CATCH
	SET @CERRORMSG = 'Error in Procedure SAVETRAN_LOC_STOCK_LEVEL at STEP#' + @NSTEP+ ' SQL ERROR: #' + LTRIM(STR(ERROR_NUMBER())) + ' ' + ERROR_MESSAGE()
	GOTO END_PROC
END CATCH
END_PROC:
	IF @@TRANCOUNT>0
	BEGIN
		IF ISNULL(@CERRORMSG,'')=''
			COMMIT TRANSACTION
		ELSE
		ROLLBACK 	
	END 
	
	DELETE FROM stklvl_LOC_STOCK_LEVEL_MST_UPLOAD WHERE sp_id=@nSpId
	DELETE FROM stklvl_LOC_STOCK_LEVEL_UPLOAD WHERE sp_id=@nSpId
	
	SELECT ISNULL(@CERRORMSG,'') AS ERRMSG,@CKEYFIELDVAL1 AS MEMO_ID
END

